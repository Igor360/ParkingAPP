// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Contexts;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ParkingContext))]
    partial class ParkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("WebApplication1.Models.Car", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("carType")
                        .HasColumnName("type");

                    b.Property<string>("code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<string>("name")
                        .HasColumnName("name");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.ToTable("car");
                });

            modelBuilder.Entity("WebApplication1.Models.Cars", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("carid");

                    b.Property<int?>("clientid");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<int>("group")
                        .HasColumnName("group");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("carid");

                    b.HasIndex("clientid");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("WebApplication1.Models.Client", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<string>("firstName")
                        .HasColumnName("firstName");

                    b.Property<string>("idNumber")
                        .HasColumnName("idNumber");

                    b.Property<string>("lastName")
                        .HasColumnName("lastName");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.ToTable("client");
                });

            modelBuilder.Entity("WebApplication1.Models.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("clientid");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<string>("description")
                        .HasColumnName("description");

                    b.Property<string>("name")
                        .HasColumnName("name");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("clientid");

                    b.ToTable("company");
                });

            modelBuilder.Entity("WebApplication1.Models.CompanyParking", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("city")
                        .HasColumnName("city");

                    b.Property<int?>("companiesid");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<string>("description")
                        .HasColumnName("description");

                    b.Property<string>("name")
                        .HasColumnName("name");

                    b.Property<string>("street")
                        .HasColumnName("street");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("companiesid");

                    b.ToTable("company_parking");
                });

            modelBuilder.Entity("WebApplication1.Models.Parking", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<string>("name")
                        .HasColumnName("name");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.ToTable("parking");
                });

            modelBuilder.Entity("WebApplication1.Models.ParkingPosition", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("companyParkingsid");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<string>("name")
                        .HasColumnName("name");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("companyParkingsid");

                    b.ToTable("parking_position");
                });

            modelBuilder.Entity("WebApplication1.Models.ParkingPricing", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<int?>("parkingPositionsid");

                    b.Property<double>("price")
                        .HasColumnName("price");

                    b.Property<string>("type")
                        .HasColumnName("type");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("parkingPositionsid");

                    b.ToTable("parking_pricing");
                });

            modelBuilder.Entity("WebApplication1.Models.ParkingTicket", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("carid");

                    b.Property<DateTime?>("createdAt")
                        .HasColumnName("created_at");

                    b.Property<string>("name")
                        .HasColumnName("name");

                    b.Property<int?>("parkingPositionid");

                    b.Property<double>("price")
                        .HasColumnName("price");

                    b.Property<int?>("pricingid");

                    b.Property<int>("purchasedTime")
                        .HasColumnName("purchased_time");

                    b.Property<int>("spendTime")
                        .HasColumnName("spend_time");

                    b.Property<DateTime?>("updatedAt")
                        .HasColumnName("updated_at");

                    b.HasKey("id");

                    b.HasIndex("carid");

                    b.HasIndex("parkingPositionid");

                    b.HasIndex("pricingid");

                    b.ToTable("parking_ticket");
                });

            modelBuilder.Entity("WebApplication1.Models.Cars", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "car")
                        .WithMany("cars")
                        .HasForeignKey("carid");

                    b.HasOne("WebApplication1.Models.Client", "client")
                        .WithMany("cars")
                        .HasForeignKey("clientid");
                });

            modelBuilder.Entity("WebApplication1.Models.Company", b =>
                {
                    b.HasOne("WebApplication1.Models.Client", "client")
                        .WithMany("companies")
                        .HasForeignKey("clientid");
                });

            modelBuilder.Entity("WebApplication1.Models.CompanyParking", b =>
                {
                    b.HasOne("WebApplication1.Models.Company", "companies")
                        .WithMany("companyParkings")
                        .HasForeignKey("companiesid");
                });

            modelBuilder.Entity("WebApplication1.Models.ParkingPosition", b =>
                {
                    b.HasOne("WebApplication1.Models.CompanyParking", "companyParkings")
                        .WithMany("parkingPositions")
                        .HasForeignKey("companyParkingsid");
                });

            modelBuilder.Entity("WebApplication1.Models.ParkingPricing", b =>
                {
                    b.HasOne("WebApplication1.Models.ParkingPosition", "parkingPositions")
                        .WithMany("parkingPricings")
                        .HasForeignKey("parkingPositionsid");
                });

            modelBuilder.Entity("WebApplication1.Models.ParkingTicket", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "car")
                        .WithMany()
                        .HasForeignKey("carid");

                    b.HasOne("WebApplication1.Models.ParkingPosition", "parkingPosition")
                        .WithMany("parkingTickets")
                        .HasForeignKey("parkingPositionid");

                    b.HasOne("WebApplication1.Models.ParkingPricing", "pricing")
                        .WithMany("parkingTickets")
                        .HasForeignKey("pricingid");
                });
#pragma warning restore 612, 618
        }
    }
}
